#!/usr/bin/env ruby

require 'optimist'
require 'octokit'

require 'github-issue-importer'

# Define blank? if it's not already defined
unless nil.respond_to? :blank?
  class Object
    def blank?
      respond_to?(:empty?) ? empty? : !self
    end
  end
end

options = Optimist::options do
  banner <<-EOS
github-issue-importer imports bugs from a Launchpad project into github issues.

Usage:
         github-issue-importer [OPTIONS]

Example:

         github-issue-importer --lp-project zookeepr \\
            --gh-login johnf \\
            --gh-token 823dadlknf8 \\
            --gh-repo johnf/zookeepr
 
EOS
  opt :'lp-project', 'Launchpad project', :type => String
  opt :'gh-login', 'Github user to login as', :type => String
  opt :'gh-token', 'Github API token', :type => String
  opt :'gh-repo', 'Github repository (e.g. johnf/github-issue-importer)', :type => String
end

Optimist::die :'lp-project', "Please specify a Launchpad project" if options[:'lp-project'].nil?
Optimist::die :'gh-login', "Please specify a GitHub login" if options[:'gh-login'].nil?
Optimist::die :'gh-token', "Please specify a GitHub token" if options[:'gh-token'].nil?
Optimist::die :'gh-repo', "Please specify a GitHub Repository" if options[:'gh-repo'].nil?

options[:'gh-repo-user'], options[:'gh-repo-name'] = options[:'gh-repo'].split('/')
Optimist::die :'gh-repo', "Please specify a valid GitHub Repository" if options[:'gh-repo-user'].nil? or options[:'gh-repo-name'].nil?

gh_client = Octokit::Client.new :access_token => options[:'gh-token']

begin
  gh_client.user options[:'gh-repo-user']
rescue Octokit::Unauthorized, Octokit::Forbidden => e
  $stderr.puts "Authorization failed: #{e}"
  exit 1
rescue Octokit::NotFound
  $stderr.puts "Could not find the user #{options[:'gh-repo-user']} in the repo name it is either private or doesn't exist"
  exit 1
end

begin
  gh_repo = gh_client.repo :username => options[:'gh-repo-user'], :repo => options[:'gh-repo-name']
rescue Octopi::NotFound
  $stderr.puts "The user #{options[:'gh-repo-user']} doesn't have a repository named #{options[:'gh-repo-name']} or it is private"
  exit 1
end

launchpad = GithubIssueImporter::Launchpad.new

bug_entries = launchpad.get_bug_entries options[:'lp-project']
bug_entries.each do |bug_entry|

  bug = launchpad.get_bug bug_entry
  puts "Processing Bug #{bug['id']}"

  bug_owner = launchpad.get_owner bug
  bug_time = Time.parse(bug['date_created'])

  body = "#{bug['description']}\n\n"
  body += "Launchpad Details: [#LP#{bug['id']}](#{bug['web_link']}) #{bug_owner} - #{bug_time}"

  comments = launchpad.get_bug_comments bug

  labels = []
  bug_importance = bug_entry['importance']
  unless bug_importance.blank? or bug_importance == 'Undecided'
    labels << bug_importance.downcase
  end

  issue = gh_client.create_issue gh_repo.full_name, bug['title'], body, :labels => (labels.empty? ? nil : labels.join(','))

  comments.shift # First comment is always the bug description
  comments.each do |comment|
    comment_owner = launchpad.get_owner comment

    body = launchpad.get_comment_attachments comment

    comment_time = Time.parse(comment['date_created'])
    body += "#{comment['content']}\n\n"
    if body.size > 65000
      puts "Comment body too long, truncating!"
      body = body[0,65000] + "\n\n... (comment truncated because it was too long)\n\n"
    end
    body += "Launchpad Details: [#LPC#{comment['id']}](#{comment['web_link']}) #{comment_owner} - #{comment_time}"

    gh_client.add_comment gh_repo.full_name, issue.number, body
  end

  bug_status = bug_entry['status']
  if bug_status =~ /^Fix/
    gh_client.close_issue gh_repo.full_name, issue.number
  end

end
